version: '3.8'

services:
  # FreeSWITCH Media Server
  freeswitch:
    image: signalwire/freeswitch:1.10
    container_name: webrtc_freeswitch
    ports:
      - "5060:5060/udp"    # SIP
      - "5066:5066"        # WebSocket
      - "7443:7443"        # WebSocket Secure (WSS)
      - "16384-16394:16384-16394/udp"  # RTP Media
    volumes:
      - ./freeswitch/conf:/etc/freeswitch
      - ./ssl:/etc/freeswitch/tls
      - freeswitch_logs:/var/log/freeswitch
    environment:
      - DOMAIN=${DOMAIN:-webrtc.local}
      - EXTERNAL_IP=${EXTERNAL_IP:-127.0.0.1}
    networks:
      - webrtc_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "fs_cli", "-x", "status"]
      interval: 30s
      timeout: 10s
      retries: 3

  # API Server (Node.js/Express)
  api-server:
    build: 
      context: ./api
      dockerfile: Dockerfile
    container_name: webrtc_api
    ports:
      - "3001:3001"
    environment:
      - NODE_ENV=development
      - DATABASE_URL=mysql://${MYSQL_USER:-webrtc_user}:${MYSQL_PASSWORD:-secure_password}@mysql:3306/${MYSQL_DATABASE:-webrtc_platform}
      - REDIS_URL=redis://redis:6379
      - JWT_SECRET=${JWT_SECRET:-your-jwt-secret-key}
      - FREESWITCH_ESL_HOST=freeswitch
      - FREESWITCH_ESL_PORT=8021
      - FREESWITCH_ESL_PASSWORD=${ESL_PASSWORD:-ClueCon}
    depends_on:
      - mysql
      - redis
      - freeswitch
    volumes:
      - ./api:/app
      - /app/node_modules
    networks:
      - webrtc_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "curl", "-f", "http://localhost:3001/health"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Web Client (React)
  web-client:
    build:
      context: ./web
      dockerfile: Dockerfile
    container_name: webrtc_web
    ports:
      - "3000:80"
    environment:
      - REACT_APP_API_URL=${API_URL:-http://localhost:3001/api}
      - REACT_APP_WSS_URL=${WSS_URL:-wss://localhost:7443}
      - REACT_APP_DOMAIN=${DOMAIN:-webrtc.local}
    depends_on:
      - api-server
    volumes:
      - ./web:/app
      - /app/node_modules
    networks:
      - webrtc_network
    restart: unless-stopped

  # MySQL Database
  mysql:
    image: mysql:8.0
    container_name: webrtc_mysql
    environment:
      - MYSQL_ROOT_PASSWORD=${MYSQL_ROOT_PASSWORD:-root_password}
      - MYSQL_DATABASE=${MYSQL_DATABASE:-webrtc_platform}
      - MYSQL_USER=${MYSQL_USER:-webrtc_user}
      - MYSQL_PASSWORD=${MYSQL_PASSWORD:-secure_password}
    volumes:
      - mysql_data:/var/lib/mysql
      - ./database/init.sql:/docker-entrypoint-initdb.d/init.sql
      - ./database/mysql.cnf:/etc/mysql/conf.d/mysql.cnf
    ports:
      - "3306:3306"
    networks:
      - webrtc_network
    restart: unless-stopped
    command: --default-authentication-plugin=mysql_native_password
    healthcheck:
      test: ["CMD", "mysqladmin", "ping", "-h", "localhost", "-u", "${MYSQL_USER:-webrtc_user}", "-p${MYSQL_PASSWORD:-secure_password}"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Redis Cache
  redis:
    image: redis:6-alpine
    container_name: webrtc_redis
    ports:
      - "6379:6379"
    volumes:
      - redis_data:/data
    networks:
      - webrtc_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "redis-cli", "ping"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Nginx Reverse Proxy
  nginx:
    image: nginx:alpine
    container_name: webrtc_nginx
    ports:
      - "80:80"
      - "443:443"
    volumes:
      - ./nginx/nginx.conf:/etc/nginx/nginx.conf
      - ./nginx/conf.d:/etc/nginx/conf.d
      - ./ssl:/etc/nginx/ssl
    depends_on:
      - api-server
      - web-client
    networks:
      - webrtc_network
    restart: unless-stopped
    healthcheck:
      test: ["CMD", "nginx", "-t"]
      interval: 30s
      timeout: 10s
      retries: 3

  # Prometheus Monitoring
  prometheus:
    image: prom/prometheus:latest
    container_name: webrtc_prometheus
    ports:
      - "9090:9090"
    volumes:
      - ./monitoring/prometheus.yml:/etc/prometheus/prometheus.yml
      - prometheus_data:/prometheus
    command:
      - '--config.file=/etc/prometheus/prometheus.yml'
      - '--storage.tsdb.path=/prometheus'
      - '--web.console.libraries=/etc/prometheus/console_libraries'
      - '--web.console.templates=/etc/prometheus/consoles'
      - '--storage.tsdb.retention.time=200h'
      - '--web.enable-lifecycle'
    networks:
      - webrtc_network
    restart: unless-stopped

  # Grafana Dashboard
  grafana:
    image: grafana/grafana:latest
    container_name: webrtc_grafana
    ports:
      - "3002:3000"
    environment:
      - GF_SECURITY_ADMIN_USER=${GRAFANA_USER:-admin}
      - GF_SECURITY_ADMIN_PASSWORD=${GRAFANA_PASSWORD:-admin123}
      - GF_USERS_ALLOW_SIGN_UP=false
    volumes:
      - grafana_data:/var/lib/grafana
      - ./monitoring/grafana/provisioning:/etc/grafana/provisioning
    depends_on:
      - prometheus
    networks:
      - webrtc_network
    restart: unless-stopped

volumes:
  mysql_data:
  redis_data:
  grafana_data:
  prometheus_data:
  freeswitch_logs:

networks:
  webrtc_network:
    driver: bridge
    ipam:
      driver: default
      config:
        - subnet: 172.20.0.0/16
